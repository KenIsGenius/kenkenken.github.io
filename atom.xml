<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KenIsGenius的競程隨筆</title>
  
  
  <link href="http://wky95.io/atom.xml" rel="self"/>
  
  <link href="http://wky95.io/"/>
  <updated>2022-03-22T13:04:24.321Z</updated>
  <id>http://wky95.io/</id>
  
  <author>
    <name>KenIsGenius</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zerojudge f994:疊疊杯子蛋糕</title>
    <link href="http://wky95.io/zj-f994/"/>
    <id>http://wky95.io/zj-f994/</id>
    <published>2022-03-21T17:48:27.000Z</published>
    <updated>2022-03-22T13:04:24.321Z</updated>
    
    <content type="html"><![CDATA[<h4 id="題目大意">題目大意</h4><p>定義 <spanclass="math inline">\(\text{D}(l,r)=\Sigma_{i=l}^r(i-l+1)\timesa_i+b_{l-1}\times\Sigma_{i=l}^r a_i\)</span></p><p>要你找 <span class="math inline">\((l_1,r_1)\)</span> ~ <spanclass="math inline">\((l_k,r_k)\)</span>, <spanclass="math inline">\(l_1=1,r_k=n,r_i+1=l_{i+1}\)</span>，使得 <spanclass="math inline">\(\Sigma_{i=l}^k \text{D}(l_i,r_i)\)</span> 最大</p><span id="more"></span><p><ahref="https://zerojudge.tw/ShowProblem?problemid=994">原題連結</a></p><h4 id="想法">想法</h4><p>另 <span class="math inline">\(P_i=\Sigma_{j=1}^{i}a_j\)</span>，<span class="math inline">\(Q_i=\Sigma_{j=1}^{i}a_j\times j\)</span></p><p><span class="math inline">\(dp\)</span>式顯然可以寫成 <spanclass="math inline">\(dp_i=Q_i+max_{0\le j&lt; i}((b_{j}-j)\timesP_i+dp_{j}-(b_{j}-j)\times P_{j}-Q_{j})\)</span></p><p>然後這樣就可以套進李超線段樹，但是因為查詢的範圍很大，所以要動態開點。</p><p>時間複雜度 <span class="math inline">\(\text{O}(n\log n)\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line">    <span class="type">int</span> m,k;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m*x+k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line">    line l;</span><br><span class="line">    <span class="type">int</span> ls,rs;</span><br><span class="line">&#125;st[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> siz=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> lb,<span class="type">int</span> rb,line seg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x)&#123;</span><br><span class="line">        x=++siz,st[x].l=seg;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(lb+<span class="number">1</span>==rb)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st[x].l.<span class="built_in">cal</span>(lb)&lt;seg.<span class="built_in">cal</span>(lb))st[x].l=seg;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(st[x].l.m&gt;seg.m)&#123;</span><br><span class="line">        <span class="built_in">swap</span>(st[x].l,seg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(lb+rb)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(st[x].l.<span class="built_in">cal</span>(mid)&lt;seg.<span class="built_in">cal</span>(mid))&#123;</span><br><span class="line">        <span class="built_in">swap</span>(st[x].l,seg);</span><br><span class="line">        <span class="built_in">add</span>(st[x].ls,lb,mid,seg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">add</span>(st[x].rs,mid,rb,seg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qry</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> lb,<span class="type">int</span> rb,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!st[x].ls <span class="keyword">and</span> !st[x].rs)<span class="keyword">return</span> st[x].l.<span class="built_in">cal</span>(p);</span><br><span class="line">    <span class="type">int</span> mid=(lb+rb)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;mid)<span class="keyword">return</span> <span class="built_in">max</span>(st[x].l.<span class="built_in">cal</span>(p),<span class="built_in">qry</span>(st[x].ls,lb,mid,p));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">max</span>(st[x].l.<span class="built_in">cal</span>(p),<span class="built_in">qry</span>(st[x].rs,mid,rb,p));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> lb=<span class="number">-1e9</span>,rb=<span class="number">1e9</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n,a[MAXN],b[MAXN],P,Q,dp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        P += a[i];</span><br><span class="line">        Q += a[i]*i;</span><br><span class="line">        dp = <span class="built_in">qry</span>(<span class="number">1</span>,lb,rb,P)+Q;</span><br><span class="line">        <span class="built_in">add</span>(x,lb,rb,&#123;(b[i]-i),dp-(b[i]-i)*P-Q&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;題目大意&quot;&gt;題目大意&lt;/h4&gt;
&lt;p&gt;定義 &lt;span
class=&quot;math inline&quot;&gt;\(\text{D}(l,r)=\Sigma_{i=l}^r(i-l+1)\times
a_i+b_{l-1}\times\Sigma_{i=l}^r a_i\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;要你找 &lt;span class=&quot;math inline&quot;&gt;\((l_1,r_1)\)&lt;/span&gt; ~ &lt;span
class=&quot;math inline&quot;&gt;\((l_k,r_k)\)&lt;/span&gt;, &lt;span
class=&quot;math inline&quot;&gt;\(l_1=1,r_k=n,r_i+1=l_{i+1}\)&lt;/span&gt;，使得 &lt;span
class=&quot;math inline&quot;&gt;\(\Sigma_{i=l}^k \text{D}(l_i,r_i)\)&lt;/span&gt; 最大&lt;/p&gt;</summary>
    
    
    
    <category term="Zerojudge" scheme="http://wky95.io/categories/Zerojudge/"/>
    
    
    <category term="DP" scheme="http://wky95.io/tags/DP/"/>
    
    <category term="動態開點" scheme="http://wky95.io/tags/%E5%8B%95%E6%85%8B%E9%96%8B%E9%BB%9E/"/>
    
    <category term="李超線段樹" scheme="http://wky95.io/tags/%E6%9D%8E%E8%B6%85%E7%B7%9A%E6%AE%B5%E6%A8%B9/"/>
    
  </entry>
  
  <entry>
    <title>Zerojudge c528:相隔小於一定距離最小總和子序列</title>
    <link href="http://wky95.io/zj-c528/"/>
    <id>http://wky95.io/zj-c528/</id>
    <published>2022-03-21T13:07:00.000Z</published>
    <updated>2022-03-22T13:04:48.061Z</updated>
    
    <content type="html"><![CDATA[<h4 id="題目大意">題目大意</h4><p>給定一個長度為 <span class="math inline">\(N\)</span>的整數序列及一個正整數 <span class="math inline">\(K\)</span>，蓋掉數個數字使任意的連續 <span class="math inline">\(K\)</span>個數字都至少有一個數字被蓋掉，問蓋掉的數字的總和最小為多少？<span id="more"></span> <ahref="https://zerojudge.tw/ShowProblem?problemid=c528">原題連結</a></p><h4 id="想法">想法</h4><p>另 <span class="math inline">\(dp[i]\)</span> 是最後一個數選擇 <spanclass="math inline">\(a[i]\)</span> 的最小可能值，所以就有 <spanclass="math inline">\(dp[i]=min_{i-k\leq j&lt;i}{dp[j]}+a[i]\)</span>。</p><p>然後區間最小值可以用一個 deque 的單調對列維護。總時間複雜度：<spanclass="math inline">\(\text{O}(N)\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; dq;</span><br><span class="line">    dq.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,a;i&lt;=n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        <span class="keyword">if</span>(dq.<span class="built_in">front</span>() &lt; i-k) dq.<span class="built_in">pop_front</span>();</span><br><span class="line">        dp[i] = a + dp[dq.<span class="built_in">front</span>()];</span><br><span class="line">        <span class="keyword">while</span>(dq.<span class="built_in">size</span>() <span class="keyword">and</span> dp[dq.<span class="built_in">back</span>()] &gt; dp[i])&#123;</span><br><span class="line">            dq.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        dq.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dq.<span class="built_in">front</span>() &lt; n-k+<span class="number">1</span>)dq.<span class="built_in">pop_front</span>();</span><br><span class="line">    cout &lt;&lt; dp[dq.<span class="built_in">front</span>()] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;題目大意&quot;&gt;題目大意&lt;/h4&gt;
&lt;p&gt;給定一個長度為 &lt;span class=&quot;math inline&quot;&gt;\(N\)&lt;/span&gt;
的整數序列及一個正整數 &lt;span class=&quot;math inline&quot;&gt;\(K\)&lt;/span&gt;
，蓋掉數個數字使任意的連續 &lt;span class=&quot;math inline&quot;&gt;\(K\)&lt;/span&gt;
個數字都至少有一個數字被蓋掉，問蓋掉的數字的總和最小為多少？</summary>
    
    
    
    <category term="Zerojudge" scheme="http://wky95.io/categories/Zerojudge/"/>
    
    
    <category term="DP" scheme="http://wky95.io/tags/DP/"/>
    
    <category term="單調對列優化" scheme="http://wky95.io/tags/%E5%96%AE%E8%AA%BF%E5%B0%8D%E5%88%97%E5%84%AA%E5%8C%96/"/>
    
  </entry>
  
</feed>
